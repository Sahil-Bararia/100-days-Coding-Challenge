
class Solution {
    
    int countPairsWithDiffK(int[] arr, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int n = arr.length;

        // Populate the hashmap with the frequency of each element
        for (int i = 0; i < n; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }

        int pairs = 0;

        // Iterate through the map to find pairs
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            int key = e.getKey();
            int val = e.getValue();

            // Count pairs (key, key + k)
            if (map.containsKey(key + k)) {
                pairs += val * map.get(key + k);
            }
        }

        return pairs;
    }

    // Driver program to test the above function
    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] arr = {1, 5, 3, 4, 2};
        int k = 3;
        System.out.println("Count of pairs with given difference is " + sol.countPairsWithDiffK(arr, k));
    }
}
