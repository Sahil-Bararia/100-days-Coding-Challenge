//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
	public static void main(String[] args) throws IOException
	{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int t = Integer.parseInt(br.readLine().trim());
        while(t-->0)
        {
            String S = br.readLine().trim();
            Solution obj = new Solution();
            List<String> ans = obj.find_permutation(S);
            for( int i = 0; i < ans.size(); i++)
            {
                out.print(ans.get(i)+" ");
            }
            out.println();
                        
        }
        out.close();
	}
}


// } Driver Code Ends


class Solution {
    public List<String> find_permutation(String S) {
        Set<String> permutations=new TreeSet<>();
        generatePermutations(S.toCharArray(),0,permutations);
        return new ArrayList<>(permutations);
    }
        public void generatePermutations(char[] str,int index,Set<String> permutations)
        {
            if(index==str.length) 
            {
            permutations.add(new String(str));
            return;
            }
            for(int i=index;i<str.length;i++)
            {
                swap(str,index,i);
                generatePermutations(str,index+1,permutations);
                swap(str,index,i);
            }
        }
        public void swap(char[] str,int i,int j)
        {
            char temp=str[i];
            str[i]=str[j];
            str[j]=temp;
        }
    }
===============================================================================

Alternate 
=============================================================================
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a string to find its permutations:");
        String input = sc.nextLine();
        
        List<String> permutations = new ArrayList<>();
        generatePermutations(input, "", permutations);
        
        System.out.println("Permutations of the string are:");
        for (String permutation : permutations) {
            System.out.println(permutation);
        }
    }

    // Recursive function to generate permutations
    private static void generatePermutations(String str, String prefix, List<String> permutations) {
        int n = str.length();
        
        // Base case: if the string is empty, add the prefix to the permutations list
        if (n == 0) {
            permutations.add(prefix);
        } else {
            // Recursive case: fix each character and generate permutations of the remaining characters
            for (int i = 0; i < n; i++) {
                generatePermutations(str.substring(0, i) + str.substring(i + 1, n), prefix + str.charAt(i), permutations);
            }
        }
    }
}
