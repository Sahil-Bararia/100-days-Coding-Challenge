//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            char[][] grid = new char[n][m];
            for (int i = 0; i < n; i++) {
                String[] S = br.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) {
                    grid[i][j] = S[j].charAt(0);
                }
            }
            Solution obj = new Solution();
            int ans = obj.numIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        
        int n= grid.length;
        int m = grid[0].length;
        // Code here
        
    
        int count=0;
        for(int i=0;i<n;i++){
            for(int k=0;k<m;k++){
                if(grid[i][k]=='1'){
                    count++;
                    dfs(grid,i,k);
                }
            }
        }
        return count;
        
    }
    private void dfs(char[][] grid, int i,int j){
        if(i<0||i>=grid.length||j<0 ||j>=grid[0].length || grid[i][j]=='0'){
            return;
        }
        grid[i][j]='0';
        for(int n=-1;n<=1;n++){
            for(int m=-1;m<=1;m++){
                 
                int delrow = i + n;
                int delcol = j+m;
                dfs(grid, delrow, delcol);}
            
        }
    }
}

