//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);

        return a;
    }

    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }

    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int n;
            n = Integer.parseInt(br.readLine());
            
            
            int d;
            d = Integer.parseInt(br.readLine());
            
            
            int[] arr = IntArray.input(br, n);
            
            Solution obj = new Solution();
            int res = obj.countPartitions(n, d, arr);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends



class Solution {
    static int MOD = 1000000007;

    public static int countPartitions(int n, int d, int[] arr) {
        int totalsum = 0;

        // Calculate the total sum of the array
        for (int i = 0; i < n; i++) {
            totalsum += arr[i];
        }

        // If totalsum is less than d or (totalsum - d) is odd, return 0
        if (totalsum < d || (totalsum - d) % 2 != 0) {
            return 0;
        }

        int sum2 = (totalsum - d) / 2;

        // Initialize the dp array
        int[] dp = new int[sum2 + 1];
        dp[0] = 1;

        // DP to count the partitions
        for (int i = 0; i < n; i++) {
            for (int j = sum2; j >= arr[i]; j--) {
                dp[j] = (dp[j] + dp[j - arr[i]]) % MOD;
            }
        }

        return dp[sum2];
    }
}
        
