//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0)
        {
            String wild = in.readLine();
            String pattern = in.readLine();
            
            Solution ob = new Solution();
            boolean flag = ob.match(wild, pattern);
            if(flag)
            System.out.println("Yes");
            else
            System.out.println("No");
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static boolean f(String s1, String s2, int index1, int index2, Boolean dp[][]) {
        if (index1 < 0 && index2 < 0) return true;
        if (index1 < 0) return false;
        if (index2 < 0) {
            for (int i = 0; i <= index1; i++) {
                if (s1.charAt(i) != '*') return false;
            }
            return true;
        }
        // If this subproblem has already been solved, return the cached value
        if (dp[index1][index2] != null) return dp[index1][index2];

        // If characters match or there's a '?' wildcard
        if (s1.charAt(index1) == s2.charAt(index2) || s1.charAt(index1) == '?') {
            dp[index1][index2] = f(s1, s2, index1 - 1, index2 - 1, dp);
        } 
        // If there's a '*' wildcard
        else if (s1.charAt(index1) == '*') {
            dp[index1][index2] = (f(s1, s2, index1 - 1, index2, dp) || f(s1, s2, index1, index2 - 1, dp));
        } 
        // Characters don't match, and there's no wildcard
        else {
            dp[index1][index2] = false;
        }

        return dp[index1][index2];
    }

    static boolean match(String wild, String pattern) {
        int n = wild.length();
        int m = pattern.length();
        Boolean dp[][] = new Boolean[n + 1][m + 1]; // Use Boolean to allow null values
        return f(wild, pattern, n - 1, m - 1, dp);
    }
}
