//{ Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;


class Array {
    
    // Driver code
	public static void main (String[] args) throws IOException{
		// Taking input using buffered reader
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int testcases = Integer.parseInt(br.readLine());
		
		// looping through all testcases
		while(testcases-- > 0){
		    String line = br.readLine();
		    String[] element = line.trim().split("\\s+");
		    int sizeOfArray = Integer.parseInt(element[0]);
		    int K = Integer.parseInt(element[1]);
		    
		    int arr [] = new int[sizeOfArray];
		    
		    line = br.readLine();
		    String[] elements = line.trim().split("\\s+");
		    for(int i = 0;i<sizeOfArray;i++){
		        arr[i] = Integer.parseInt(elements[i]);
		    }
		    
		    Solution obj = new Solution();
		    int res = obj.lenOfLongSubarr(arr, sizeOfArray, K);
		    
		    System.out.println(res);
		}
	}
}



// } Driver Code Ends


//User function Template for Java


class Solution {
    
    // Function for finding the length of the longest subarray with sum equal to k
    public static int lenOfLongSubarr(int arr[], int n, int k) {
        // HashMap to store (cumulative sum, index)
        HashMap<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int maxlen = 0;
        
        for (int i = 0; i < n; i++) {
            // Add current element to sum
            sum += arr[i];
            
            // Check if sum equals k
            if (sum == k) {
                maxlen = i + 1; // Update maxlen to the current length
            }
            
            // If (sum - k) is found in the map, we have a subarray with sum k
            if (map.containsKey(sum - k)) {
                maxlen = Math.max(maxlen, i - map.get(sum - k));
            }
            
            // Add sum to the map if it's not already there
            if (!map.containsKey(sum)) {
                map.put(sum, i);
            }
        }
        
        return maxlen;
    }
}


