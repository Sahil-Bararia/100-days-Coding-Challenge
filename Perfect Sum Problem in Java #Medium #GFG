//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n = sc.nextInt();
                    int sum = sc.nextInt();
                    int arr[] = new int[n];
                    for(int i = 0;i<n;i++)
                    arr[i] = sc.nextInt();
                    
                    Solution ob = new Solution();
                    System.out.println(ob.perfectSum(arr,n,sum));
                }
        }
}    
// } Driver Code Ends


class Solution{
 /* Recursion without Memoization and tabulation
    public int subsets(int arr[],int index,int target)
    {
        
        if(target==0)return 1;// 1-->True
        if(index==0) return arr[0]==target ? 1:0;//return 1 if true or else 0
        int notpick=subsets(arr,index-1,target);
        int pick=0;
        if(arr[index]<=target)
        {
          pick=subsets(arr,index-1,target-arr[index]);
        }
        return notpick+pick;
    }
	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    n=arr.length;
	    return subsets(arr,n-1,sum);
	    
	} 
}
*/
/* Recursion with Memoization
  public int subsets(int arr[],int index,int target,int dp[][])
    {
        
        if(target==0)return 1;// 1-->True
        if(index==0) return arr[0]==target ? 1:0;//return 1 if true or else 0
        if(dp[index][target]!=-1)return dp[index][target];
        int notpick=subsets(arr,index-1,target,dp);
        int pick=0;
        if(arr[index]<=target)
        {
          pick=subsets(arr,index-1,target-arr[index],dp);
        }
        return dp[index][target]=notpick+pick;
    }
	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    n=arr.length;
	    int dp[][]=new int[n][sum+1];
	    for(int []row:dp)
	    {
	        Arrays.fill(row,-1);
	    }
	    return subsets(arr,n-1,sum,dp);
	    
	} 
}
*/
/*Recursion with Memoization and Tabulation
    public int perfectSum(int arr[], int n, int sum) {
        int[][] dp = new int[n + 1][sum + 1];

        // Base case: There is one way to get sum 0 (using the empty subset)
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        // Fill the dp table
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                if (arr[i - 1] <= j) {
                    // Include the current element or exclude it
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] + dp[i - 1][j];
                } else {
                    // Exclude the current element
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        // The answer will be in dp[n][sum]
        return dp[n][sum];
    }
}*/
// Most optimised Code

     static final int MOD = 1000000007;

    public int perfectSum(int arr[], int n, int sum) {
        int[] dp = new int[sum + 1];

        // Base case: There's one way to get a sum of 0 (by choosing the empty subset)
        dp[0] = 1;

        // Fill the dp array
        for (int i = 0; i < n; i++) {
            for (int j = sum; j >= arr[i]; j--) {
                dp[j] = (dp[j] + dp[j - arr[i]]) % MOD;
            }
        }

        return dp[sum];
}

