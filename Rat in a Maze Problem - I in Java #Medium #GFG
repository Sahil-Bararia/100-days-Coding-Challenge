//{ Driver Code Starts
// Initial Template for Java

import java.util.*;

class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++) System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}

// } Driver Code Ends



class Solution {
    public ArrayList<String> findPath(int[][] mat) {
        ArrayList<String> result = new ArrayList<>();
        if (mat == null || mat.length == 0 || mat[0][0] == 0) {
            return result;  // No path if starting cell is blocked
        }
        int n = mat.length;
        boolean[][] visited = new boolean[n][n];
        backtrack(mat, 0, 0, n, "", result, visited);
        return result;
    }

    private void backtrack(int[][] mat, int i, int j, int n, String path, ArrayList<String> result, boolean[][] visited) {
        // Base case: when the rat reaches the bottom-right corner
        if (i == n - 1 && j == n - 1) {
            result.add(path);
            return;
        }

        // Mark the cell as visited
        visited[i][j] = true;

        // Define the possible movements: down, left, right, up
        int[] di = {1, 0, 0, -1};
        int[] dj = {0, -1, 1, 0};
        char[] dir = {'D', 'L', 'R', 'U'};

        // Try all possible movements
        for (int k = 0; k < 4; k++) {
            int nextI = i + di[k];
            int nextJ = j + dj[k];

            if (isSafe(mat, nextI, nextJ, n, visited)) {
                backtrack(mat, nextI, nextJ, n, path + dir[k], result, visited);
            }
        }

        // Unmark the cell as visited for the next path
        visited[i][j] = false;
    }

    private boolean isSafe(int[][] mat, int i, int j, int n, boolean[][] visited) {
        return (i >= 0 && i < n && j >= 0 && j < n && mat[i][j] == 1 && !visited[i][j]);
    }
}
