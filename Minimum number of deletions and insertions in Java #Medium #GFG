//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*;
class GfG
{
    public static void main(String args[])
        {
            Scanner sc = new Scanner(System.in);
            int t = sc.nextInt();
            while(t-->0)
                {
                    String s1 = sc.next();
                    String s2 = sc.next();
                    Solution ob = new Solution();
                    System.out.println(ob.minOperations(s1,s2));
                }
        }
}    
// } Driver Code Ends


//User function Template for Java
/*
class Solution {
    // Recursive function to find minimum number of operations to convert s1 to s2
    public int f(int index1, int index2, String s1, String s2,int dp[][]) {
         if(dp[index1][index2]!=-1)return dp[index1][index2];
        // Base cases
        if (index1 == 0) return index2;  // Need to insert all remaining characters of s2
        if (index2 == 0) return index1;  // Need to delete all remaining characters of s1
        // If characters match, move both pointers
        if (s1.charAt(index1 - 1) == s2.charAt(index2 - 1)) {
            dp[index1][index2]=f(index1 - 1, index2 - 1, s1, s2,dp);
        } else {
            // If characters don't match, consider all three operations
            int insertOp = 1 + f(index1, index2 - 1, s1, s2,dp);    // Insert character
            int deleteOp = 1 + f(index1 - 1, index2, s1, s2,dp);    // Delete character

            // Return the minimum of the three operations
            dp[index1][index2]= Math.min(insertOp,deleteOp);
        }
        return dp[index1][index2];
    }

    // Function to find the minimum number of operations to convert str1 to str2
    public int minOperations(String str1, String str2) {
        int dp[][]=new int[str1.length()+1][str2.length()+1];
        for(int i=0;i<=str1.length();i++)
        {
            Arrays.fill(dp[i],-1);
        }
        // Call the recursive function with the lengths of the strings
        return f(str1.length(), str2.length(), str1, str2,dp);
    }
}
*/
class Solution {
    public int minOperations(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
        
        // Create a DP array to store the length of LCS
        int[][] dp = new int[m + 1][n + 1];
        
        // Build the dp array from bottom up
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;  // Initialize the first row and column
                } else if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];  // Characters match, extend LCS
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);  // Characters don't match
                }
            }
        }
        
        // Length of Longest Common Subsequence
        int lcs = dp[m][n];
        
        // Minimum number of operations: (m - lcs) deletions + (n - lcs) insertions
        int deletions = m - lcs;
        int insertions = n - lcs;
        
        return deletions + insertions;
    }
}
