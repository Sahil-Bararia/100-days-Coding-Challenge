//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int[][] grid = new int[n][n];
            for(int i = 0; i < n; i++){
                String[] S = br.readLine().trim().split(" ");
                for(int j = 0; j < n; j++){
                    grid[i][j] = Integer.parseInt(S[j]);
                }
            }
            Solution obj = new Solution();
            int ans = obj.minimumCostPath(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends

class Pair implements Comparable<Pair>
{
    int first,second,third;
    public Pair(int first,int second,int third)
    {
         this.first=first;
        this.second=second;
        this.third=third;
    }
    public int compareTo(Pair other)
    {
        return Integer.compare(this.first,other.first);
    }
}
class Solution
{
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
    public int minimumCostPath(int[][] grid)
    {    
          PriorityQueue<Pair>pq=new PriorityQueue<>();
          int m=grid.length; // Length of rows
          int n=grid[0].length; // Length of columns
           boolean vis[][]=new boolean[m][n];
          for(int i=0;i<m;i++)
          {
              for(int j=0;j<n;j++)
              {
                   vis[i][j]=false;
              }
          }
         
         // Arrays.fill(vis,false);
          pq.add(new Pair(grid[0][0],0,0));
          vis[0][0]=true;
          while(!pq.isEmpty())
          {
              
              Pair temp=pq.poll();
              int row=temp.second;
              int col=temp.third;
              int wt=temp.first;
               if (row == m - 1 && col == n - 1) {
                return wt;
            }
              int delrow[]={-1,0,+1,0};
              int delcol[]={0,1,0,-1};
              for(int i=0;i<4;i++)
              {
                   int nrow=row+delrow[i];
                   int ncol=col+delcol[i];
                  if (nrow >= 0 && nrow < m && ncol >= 0 && ncol < n && !vis[nrow][ncol]) 
                  {
                        vis[nrow][ncol] = true;
                        pq.add(new Pair(wt+grid[nrow][ncol], nrow, ncol));
                        
                }
              }
             
          }
         return 0;
          
    }
}
