//{ Driver Code Starts
import java.util.*;

class Merge_Sort
{
    //method to print the elements of the array
	static void printArray(int arr[])
    {
        StringBuffer sb=new StringBuffer("");
        int n = arr.length;
        for (int i=0; i<n; ++i)
            sb.append(arr[i]+" ");
        System.out.println(sb.toString());
    }

    

	public static void main(String args[])
	{
	    //taking input using Scanner class
		Scanner sc = new Scanner(System.in);
		
		//taking testcases
		int T = sc.nextInt();
		while(T>0)
		{
		    //taking elements count
			int n = sc.nextInt();
			
			//creating an object of class Merge_Sort
			Merge_Sort ms = new Merge_Sort();
			
			//creating an array of size n
			int arr[] = new int[n];
			
			//adding elements to the array
			for(int i=0;i<n;i++)
				arr[i] = sc.nextInt();

            
			Solution g = new Solution();
			
			//calling the method mergeSort
			g.mergeSort(arr,0,arr.length-1);

            //calling the method printArray
			ms.printArray(arr);
		T--;
		}
	}
}



// } Driver Code Ends


class Solution {
    
    // Merge Sort function that sorts an array from index l to r
    void mergeSort(int arr[], int l, int r) {
        if (l >= r) return; // Base condition, single element is already sorted
        
        int mid = (l + r) / 2; // Calculate the middle point
        mergeSort(arr, l, mid); // Sort first half
        mergeSort(arr, mid + 1, r); // Sort second half
        merge(arr, l, mid, r); // Merge the two halves
    }

    // Function to merge two sorted halves of the array
    void merge(int arr[], int l, int m, int r) {
        int left = l; // Start of the left sorted half
        int right = m + 1; // Start of the right sorted half
        ArrayList<Integer> temp = new ArrayList<>(); // Temporary array to store sorted elements
        
        // Merge the two halves into temp array
        while (left <= m && right <= r) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }
        
        // Add remaining elements of left half if any
        while (left <= m) {
            temp.add(arr[left]);
            left++;
        }
        
        // Add remaining elements of right half if any
        while (right <= r) {
            temp.add(arr[right]);
            right++;
        }
        
        // Copy the sorted elements back into original array
        for (int i = l; i <= r; i++) {
            arr[i] = temp.get(i - l);
        }
    }
}
