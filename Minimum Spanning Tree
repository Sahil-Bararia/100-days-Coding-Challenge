//{ Driver Code Starts


import java.io.*;
import java.lang.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static PrintWriter ot;

    public static void main(String args[]) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        ot = new PrintWriter(System.out);
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            String s[] = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            List<List<int[]>> list = new ArrayList<>();
            for (int i = 0; i < V; i++) list.add(new ArrayList<>());
            for (int i = 0; i < E; i++) {
                s = br.readLine().trim().split(" ");
                int a = Integer.parseInt(s[0]);
                int b = Integer.parseInt(s[1]);
                int c = Integer.parseInt(s[2]);
                list.get(a).add(new int[] {b, c});
                list.get(b).add(new int[] {a, c});
            }
            ot.println(new Solution().spanningTree(V, E, list));
        }
        ot.close();
    }
}
// } Driver Code Ends


// User function Template for Java

class Pair implements Comparable<Pair> {
    int distance, node;

    public Pair(int distance, int node) {
        this.distance = distance;
        this.node = node;
    }

    public int compareTo(Pair other) {
        return Integer.compare(this.distance, other.distance);
    }
}

class Solution {
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        boolean[] vis = new boolean[V];
        Arrays.fill(vis, false);
        pq.add(new Pair(0, 0)); // Start from node 0 with weight 0
        int sum = 0;

        while (!pq.isEmpty()) {
            Pair current = pq.poll();
            int wt = current.distance;
            int node = current.node;

            if (vis[node]) continue;
            vis[node] = true;
            sum += wt;

            for (int[] neighbor : adj.get(node)) {
                int nextNode = neighbor[0];
                int nextWeight = neighbor[1];
                if (!vis[nextNode]) {
                    pq.add(new Pair(nextWeight, nextNode));
                }
            }
        }
        return sum;
    }
}
