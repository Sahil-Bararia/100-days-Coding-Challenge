
class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K) {
        long result[] = new long[N - K + 1];
        Deque<Integer> queue = new LinkedList<>();
        int index = 0;

        for (int i = 0; i < N; i++) {
            // Add current element index to the queue if it is negative
            if (A[i] < 0) {
                queue.addLast(i);
            }

            // Remove the elements which are out of this window
            if (!queue.isEmpty() && queue.peekFirst() < i - K + 1) {
                queue.pollFirst();
            }

            // If we have processed at least K elements, add the result for the current window
            if (i >= K - 1) {
                if (!queue.isEmpty()) {
                    result[index++] = A[queue.peekFirst()];
                } else {
                    result[index++] = 0;
                }
            }
        }
        
        return result;
    }
}
