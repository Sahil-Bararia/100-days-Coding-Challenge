//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
class GfG {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int sum = sc.nextInt();
            int N = sc.nextInt();
            int coins[] = new int[N];
            for (int i = 0; i < N; i++) coins[i] = sc.nextInt();
            Solution ob = new Solution();
            System.out.println(ob.count(coins, N, sum));
        }
    }
}


// } Driver Code Ends


// User function Template for Java
/*
//Recursion only
class Solution {
    public long f(int coins[],int index,int sum)
    {
        if(index==0)
        {
            if(sum%coins[0]==0)return 1;
             else return 0;
        }
        long notpick=f(coins,index-1,sum);
        long pick=0;
        if(coins[index]<=sum)
        pick=f(coins,index,sum-coins[index]);
        return pick+notpick;
    }
    public long count(int coins[], int N, int sum) {
        return f(coins,N-1,sum);
    }
}*/
/*
// Recursion with Memoization no TLE
class Solution {
    public long f(int coins[],int index,int sum,long dp[][])
    {
        if(index==0)
        {
            if(sum%coins[0]==0)return 1;
             else return 0;
        }
        if(dp[index][sum]!=-1)return dp[index][sum];
        long notpick=f(coins,index-1,sum,dp);
        long pick=0;
        if(coins[index]<=sum)
        pick=f(coins,index,sum-coins[index],dp);
        return dp[index][sum]=pick+notpick;
    }
    public long count(int coins[], int N, int sum) {
        long dp[][]=new long[N][sum+1];
        for(int i=0;i<N;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                dp[i][j]=-1;
            }
        }
        return f(coins,N-1,sum,dp);
    }
}
*/
/* Recursion with Memoization and Tabulation
class Solution {
    
      public long count(int coins[], int N, int sum) {
        long dp[][]=new long[N][sum+1];
         for (int i = 0; i < N; i++) {
            dp[i][0] = 1; // There's exactly 1 way to make sum 0 (pick no coins)
        }
          for(int j=0;j<=sum;j++)
        {
            if(j%coins[0]==0) dp[0][j]=1;
             else  dp[0][j]=0;
        }
        for(int i=1;i<N;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                 long notpick=dp[i-1][j];
                 long pick=0;
                if(coins[i]<=j)
                  pick=dp[i][j-coins[i]];
                dp[i][j]=pick+notpick;
            }
        }
        return dp[N-1][sum];
        
    }
}
*/
// Most optimised space solution
class Solution {
    public long count(int coins[], int N, int sum) {
        long dp[] = new long[sum + 1];

        // Base case: There's exactly 1 way to make sum 0 (pick no coins)
        dp[0] = 1;

        // Iterate over each coin
        for (int i = 0; i < N; i++) {
            // Update dp array for each coin, starting from coins[i]
            for (int j = coins[i]; j <= sum; j++) {
                dp[j] += dp[j - coins[i]];
            }
        }

        // The answer will be in dp[sum]
        return dp[sum];
    }
}

