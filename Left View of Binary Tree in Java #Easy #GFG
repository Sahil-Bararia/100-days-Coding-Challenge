import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

// Class representing a tree node
class Node {
    int data;
    Node left, right;
    Node(int item) {
        data = item;
        left = right = null;
    }
}

class Tree {
    // Function to return list containing elements of the left view of binary tree.
    ArrayList<Integer> leftView(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;  // Return empty list if root is null
        }

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int n = queue.size();
            
            // Process all nodes at the current level
            for (int i = 0; i < n; i++) {
                Node temp = queue.poll();
                
                // Add the first node of each level to the result list
                if (i == 0) {
                    result.add(temp.data);
                }
                
                // Add left child to queue
                if (temp.left != null) {
                    queue.add(temp.left);
                }
                
                // Add right child to queue
                if (temp.right != null) {
                    queue.add(temp.right);
                }
            }
        }
        return result;
    }
}
