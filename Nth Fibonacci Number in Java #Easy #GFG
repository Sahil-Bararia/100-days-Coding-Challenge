//{ Driver Code Starts
//Initial Template for Java
import java.util.*;
import java.io.*;
class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int n = Integer.parseInt(read.readLine());
            Solution ob = new Solution();

            System.out.println(ob.nthFibonacci(n));
        }
    }
}
// } Driver Code Ends


//Most optimised
class Solution {
    static int MOD = (int)(1e9 + 7);
    
    static int nthFibonacci(int n) {
        // Initialize dp array with size n+1 to accommodate all indices from 0 to n
        int dp[] = new int[n + 1];
        
        // Base cases
        dp[0] = 0; // Fibonacci(0) = 0
        dp[1] = 1; // Fibonacci(1) = 1
        
        // Fill the dp array for all values up to n
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2]) % MOD;
        }
        
        // Return the nth Fibonacci number
        return dp[n];
    }
}
