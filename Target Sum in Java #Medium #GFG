//{ Driver Code Starts
//Initial Template for JAVA

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N = Integer.parseInt(read.readLine());
            
            String S[] = read.readLine().split(" ");
            
            int[] A = new int[N];
            
            for(int i=0 ; i<N ; i++){
                A[i] = Integer.parseInt(S[i]);
            }
            int target = Integer.parseInt(read.readLine());

            Solution ob = new Solution();
            System.out.println(ob.findTargetSumWays(N,A, target));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int MOD = (int)(1e9 + 7);

    static int findTargetSumWays(int N, int[] A, int target) {
        int totalsum = 0;

        // Calculate the total sum of the array
        for (int i = 0; i < N; i++) {
            totalsum += A[i];
        }

        // If the target is negative, consider the absolute value
        target = Math.abs(target);

        // Check for early exit conditions
        if (totalsum < target || (totalsum - target) % 2 != 0) {
            return 0;
        }

        // Calculate sum2 based on the formula
        int sum2 = (totalsum - target) / 2;

        // Initialize the dp array
        int[] dp = new int[sum2 + 1];
        dp[0] = 1;

        // Dynamic Programming to count the ways
        for (int i = 0; i < N; i++) {
            for (int j = sum2; j >= A[i]; j--) {
                dp[j] = (dp[j] + dp[j - A[i]]) % MOD;
            }
        }

        return dp[sum2];
    }
}
