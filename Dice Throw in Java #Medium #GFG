//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S[] = read.readLine().split(" ");

            int M = Integer.parseInt(S[0]);
            int N = Integer.parseInt(S[1]);
            int X = Integer.parseInt(S[2]);

            Solution ob = new Solution();
            System.out.println(ob.noOfWays(M, N, X));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    static long FindWays(int m, int n, int x, long dp[][]) {
        // Base cases
        if (x < 0) return 0;  // If sum is negative, no ways exist
        if (n == 0) return (x == 0) ? 1 : 0;  // If no dice left, check if sum is 0

        // Check if the result is already computed
        if (dp[n][x] != -1) return dp[n][x];

        long ans = 0;

        // Try every possible face value (from 1 to m)
        for (int i = 1; i <= m; i++) {
            ans += FindWays(m, n - 1, x - i, dp);
        }

        // Store the result in dp array and return
        return dp[n][x] = ans;
    }

    static long noOfWays(int m, int n, int x) {
        long dp[][] = new long[n + 1][x + 1];

        // Initialize dp array with -1 (uncomputed states)
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= x; j++) {
                dp[i][j] = -1;
            }
        }

        // Call FindWays and return the result
        return FindWays(m, n, x, dp);
    }
}
