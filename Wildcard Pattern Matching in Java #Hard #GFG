//{ Driver Code Starts
import java.util.*;

class WildcardPattern {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        while (t > 0) {
            String pat = sc.nextLine();
            String text = sc.nextLine();
            Solution g = new Solution();
            System.out.println(g.wildCard(pat, text));
            t--;
        }
    }
}
// } Driver Code Ends

/* Recursion with Memoization no TLE
class Solution {
    public int isMatch(int index1, int index2, String pattern, String str, int[][] dp) {
        // Base case: If both pattern and str are exhausted
        if (index1 < 0 && index2 < 0) return 1;
        
        // If pattern is exhausted but str is not
        if (index1 < 0) return 0;
        
        // If str is exhausted but pattern is not
        if (index2 < 0) {
            // Check if the remaining pattern can match an empty string (only '*' can do this)
            for (int i = 0; i <= index1; i++) {
                if (pattern.charAt(i) != '*') return 0;
            }
            return 1;
        }
        
        // If the result is already computed, return it
        if (dp[index1][index2] != -1) return dp[index1][index2];

        // If characters match or pattern has a '?'
        if (pattern.charAt(index1) == str.charAt(index2) || pattern.charAt(index1) == '?') {
            return dp[index1][index2] = isMatch(index1 - 1, index2 - 1, pattern, str, dp);
        }

        // If pattern has a '*'
        if (pattern.charAt(index1) == '*') {
            // '*' can match an empty sequence or any sequence of characters
            return dp[index1][index2] = (isMatch(index1 - 1, index2, pattern, str, dp) == 1 || 
                                         isMatch(index1, index2 - 1, pattern, str, dp) == 1) ? 1 : 0;
        }

        // If characters do not match and pattern is not a wildcard
        return dp[index1][index2] = 0;
    }
    
    public int wildCard(String pattern, String str) {
        int[][] dp = new int[pattern.length()][str.length()];
        // Initialize dp array with -1
        for (int i = 0; i < pattern.length(); i++) {
            for (int j = 0; j < str.length(); j++) {
                dp[i][j] = -1;
            }
        }
        return isMatch(pattern.length() - 1, str.length() - 1, pattern, str, dp);
    }
}
*/
/*Recursion with memoization and Tabulation
class Solution {
    public int wildCard(String pattern, String str) {
        int m = pattern.length();
        int n = str.length();
        
        // Create a 2D DP table
        int[][] dp = new int[m + 1][n + 1];
        
        // Base case: Both pattern and str are empty
        dp[0][0] = 1;
        
        // Initialize the first row for patterns that only contain '*'
        for (int i = 1; i <= m; i++) {
            if (pattern.charAt(i - 1) == '*') {
                dp[i][0] = dp[i - 1][0];
            }
        }
        
        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char pChar = pattern.charAt(i - 1);
                char sChar = str.charAt(j - 1);
                
                if (pChar == sChar || pChar == '?') {
                    // If characters match or pattern has '?'
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (pChar == '*') {
                    // '*' can match an empty sequence or any sequence of characters
                    dp[i][j] = (dp[i - 1][j]==1 || dp[i][j - 1]==1)?1:0;
                } else {
                    // Characters do not match and pattern is not a wildcard
                    dp[i][j] = 0;
                }
            }
        }
        
        // The result is stored in dp[m][n]
        return dp[m][n];
    }
}
*/
//Most optimised code 
class Solution {
    public int wildCard(String pattern, String str) {
        int m = pattern.length();
        int n = str.length();
        
        // Create 1D DP arrays
        int[] prev = new int[n + 1];
        int[] curr = new int[n + 1];
        
        // Base case: Both pattern and str are empty
        prev[0] = 1;
        
        // Initialize the prev array for patterns that only contain '*'
        for (int i = 1; i <= m; i++) {
            if (pattern.charAt(i - 1) == '*') {
                prev[0] = prev[0];
            } else {
                break;
            }
        }
        
        // Fill the DP arrays
        for (int i = 1; i <= m; i++) {
            // Set curr[0] for the current pattern row
            curr[0] = (pattern.charAt(i - 1) == '*') ? prev[0] : 0;

            for (int j = 1; j <= n; j++) {
                char pChar = pattern.charAt(i - 1);
                char sChar = str.charAt(j - 1);

                if (pChar == sChar || pChar == '?') {
                    curr[j] = prev[j - 1];
                } else if (pChar == '*') {
                    curr[j] = (prev[j]==1 || curr[j - 1]==1)?1:0;
                } else {
                    curr[j] = 0;
                }
            }
            
            // Swap prev and curr arrays
            int[] temp = prev;
            prev = curr;
            curr = temp;
        }
        
        // The result is stored in prev[n] after the last iteration
        return prev[n];
    }
}
