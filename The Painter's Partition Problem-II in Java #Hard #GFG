class Solution {
    
    // Function to count the minimum number of painters required to paint all boards with a given maximum workload.
    static long countPainters(int[] arr, long maxLoad) {
        long painters = 1;
        long currentLoad = 0;
        
        for (int i = 0; i < arr.length; i++) {
            if (currentLoad + arr[i] <= maxLoad) {
                currentLoad += arr[i];
            } else {
                painters++;
                currentLoad = arr[i];
            }
        }
        return painters;
    }

    // Function to find the minimum time required to paint all boards.
    static long minTime(int[] arr, int n, int k) {
        long totalSum = 0;
        long maxBoard = 0;
        
        for (int i = 0; i < n; i++) {
            totalSum += arr[i];
            maxBoard = Math.max(maxBoard, arr[i]);
        }
        
        long start = maxBoard;
        long end = totalSum;
        long result = end; // Store the minimum possible result
        
        while (start <= end) {
            long mid = start + (end - start) / 2;
            long totalPainters = countPainters(arr, mid);
            
            if (totalPainters <= k) {
                result = mid; // Update the result if fewer or equal painters can handle the work
                end = mid - 1; // Try for a smaller maximum workload
            } else {
                start = mid + 1; // Increase the maximum workload to reduce the number of painters
            }
        }
        return result;
    }
}
