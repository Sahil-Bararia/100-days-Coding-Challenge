//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String s1 = br.readLine();
            String[] S = s1.split(" ");
            String s = S[0];
            String t = S[1];
            Solution ob = new Solution();
            int ans = ob.editDistance(s, t);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


class Solution {
    public int f(int i, int j, String str1, String str2, int dp[][]) {
        if (i < 0) return j + 1; // String 1 gets exhausted
        if (j < 0) return i + 1; // String 2 gets exhausted
        if (dp[i][j] != -1) return dp[i][j];
        if (str1.charAt(i) == str2.charAt(j)) return dp[i][j] = f(i - 1, j - 1, str1, str2, dp);

        // Calculate the minimum cost of insert, delete, and replace operations
        int insert = f(i, j - 1, str1, str2, dp);
        int delete = f(i - 1, j, str1, str2, dp);
        int replace = f(i - 1, j - 1, str1, str2, dp);
        
        return dp[i][j] = 1 + Math.min(insert, Math.min(delete, replace));
    }

    public int editDistance(String str1, String str2) {
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = -1;
            }
        }

        return f(n - 1, m - 1, str1, str2, dp);
    }
}
