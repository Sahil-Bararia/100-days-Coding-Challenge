//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            String s = read.readLine().trim();

            Solution ob = new Solution();
            System.out.println(ob.longestUniqueSubsttr(s));
        }
    }
}
// } Driver Code Ends




class Solution {
    // Function to find the length of the longest substring without repeating characters
    int longestUniqueSubsttr(String S) {
        // Base case: if the string is empty
        if (S == null || S.length() == 0) {
            return 0;
        }

        // HashMap to store the last occurrence of each character
        HashMap<Character, Integer> mp = new HashMap<>();
        int maxLength = 0;
        int start = 0;

        // Iterate over the string
        for (int end = 0; end < S.length(); end++) {
            char currentChar = S.charAt(end);

            // If the character is already in the HashMap, move the start pointer
            if (mp.containsKey(currentChar)) {
                start = Math.max(start, mp.get(currentChar) + 1);
            }

            // Update the HashMap with the current character's position
            mp.put(currentChar, end);

            // Update the maximum length
            maxLength = Math.max(maxLength, end - start + 1);
        }

        return maxLength;
    }
}
