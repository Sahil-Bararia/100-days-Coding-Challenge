//{ Driver Code Starts
// Initial Template for Java

import java.util.*;


// } Driver Code Ends
// User function Template for Java

class Solution {
    /*
    public int SumofMiddleElements(int[] arr1, int[] arr2) {
        int n=arr1.length;
        int i;
        int result[]=new int[2*n];
        for(i=0;i<n;i++)
        {
            result[i]=arr1[i];
            result[i+n]=arr2[i];
        }
        Arrays.sort(result);
        return result[n]+result[n-1];
    }*/
    public int SumofMiddleElements(int[] arr1, int[] arr2) {
        int n = arr1.length;
        int i = 0, j = 0, count = 0;
        int m1 = -1, m2 = -1;

        // We need to find the two middle elements, which will be at positions n-1 and n
        for (int k = 0; k <= n; k++) {
            // If all elements of arr1 have been traversed, the remaining elements must be in arr2
            if (i == n) {
                m1 = m2;
                m2 = arr2[0];
                break;
            }

            // If all elements of arr2 have been traversed, the remaining elements must be in arr1
            if (j == n) {
                m1 = m2;
                m2 = arr1[0];
                break;
            }

            // Move the pointer to the next smallest element in either arr1 or arr2
            if (arr1[i] <= arr2[j]) {
                m1 = m2;  // Store the last middle element
                m2 = arr1[i];
                i++;
            } else {
                m1 = m2;
                m2 = arr2[j];
                j++;
            }
        }

        return m1 + m2;
    }
}



//{ Driver Code Starts.
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine(); // Consume newline
        while (t-- > 0) {
            String[] input1 = sc.nextLine().split(" ");
            int[] arr = new int[input1.length];
            for (int i = 0; i < input1.length; i++) {
                arr[i] = Integer.parseInt(input1[i]);
            }

            String[] input2 = sc.nextLine().split(" ");
            int[] brr = new int[input2.length];
            for (int i = 0; i < input2.length; i++) {
                brr[i] = Integer.parseInt(input2[i]);
            }

            Solution ob = new Solution();
            int res = ob.SumofMiddleElements(arr, brr);
            System.out.println(res);
        }
    }
}

// } Driver Code Ends
