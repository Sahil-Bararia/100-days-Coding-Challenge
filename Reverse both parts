==================================================================================
USING LINKED LIST
==================================================================================
public static  Node reverseHalf(Node head) {
         if(head == null) 
         return  head; 
         
         Node curr= head; 
         Node prev= null; 
         Node next = null; 
         
         while( curr!= null ){
             next = curr.next; 
             curr.next = prev ; 
             prev= curr ; 
             curr=  next ; 
         }
         
         return prev; 
    }
    public static Node reverse(Node head, int k) {
        // code here
        if( head ==  null || head.next == null ) return head; 
        
        Node temp1= head; 
        Node temp2= null ; 
        
        while( temp1.next != null ){
            if(k > 0) {
                temp2=temp1; 
            }
            temp1= temp1.next; 
            k--;
        }
        Node temp =  temp2.next ; 
        temp2.next= null ; 
        Node firstHalf =   reverseHalf(head);
        Node secondHalf =   reverseHalf(temp ) ; 
        
        head = firstHalf; 
        temp =firstHalf;
        while( temp.next!= null ){
            temp = temp.next; 
        }
        temp.next= secondHalf; 
        
        return head; 
    }







======================================================================================
USING STACK GREAT ALTERNATIVE
======================================================================================
class Solution {
    public static Node reverse(Node head, int k) {
        // code here
        Stack<Integer> s1= new Stack<>();
        Stack<Integer> s2= new Stack<>();
        Node temp=head;
        int i=0;
        while(temp!=null){
            if(i<k){
                s1.push(temp.data);
            }else{
                s2.push(temp.data);
            }
            i++;
            temp=temp.next;
        }
        temp=head;
        while(temp!=null){
            if(!s1.isEmpty()){
                temp.data=s1.pop();
            }else{
                temp.data=s2.pop();
            }
            temp=temp.next;
        }
        
      return head;  
    }
}
=======================================================================
