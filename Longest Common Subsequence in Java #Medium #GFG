//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int test = sc.nextInt();
        while (test-- > 0) {
            int n = sc.nextInt(); // Take size of both the strings as input
            int m = sc.nextInt();

            String str1 = sc.next(); // Take both the string as input
            String str2 = sc.next();

            Solution obj = new Solution();

            System.out.println(obj.lcs(n, m, str1, str2));
        }
    }
}
// } Driver Code Ends

/*Recursion only
class Solution {
    // Function to find the length of longest common subsequence in two strings.
    public static int f(int n, int m, String s1, String s2) {
        // Base case: if either string is empty, the LCS is 0
        if (n == 0 || m == 0) {
            return 0;
        }

        // If the characters match, reduce both strings and add 1 to the result
        if (s1.charAt(n - 1) == s2.charAt(m - 1)) {
            return 1 + f(n - 1, m - 1, s1, s2);
        } else {
            // If characters don't match, find the max by reducing either string
            return Math.max(f(n - 1, m, s1, s2), f(n, m - 1, s1, s2));
        }
    }

    static int lcs(int n, int m, String str1, String str2) {
        return f(n, m, str1, str2);
    }
}
*/
class Solution {
    static int lcs(int n, int m, String str1, String str2) {
        int dp[] = new int[m + 1]; // DP array to store the lengths of LCS
        
        // Iterate over each character in str1
        for (int i = 1; i <= n; i++) {
            int prev = 0; // To store dp[j-1] value in the previous iteration
            for (int j = 1; j <= m; j++) {
                int temp = dp[j]; // Temporary storage for current dp[j] value

                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[j] = prev + 1; // Update dp[j] for a matching character
                } else {
                    dp[j] = Math.max(dp[j], dp[j - 1]); // Otherwise, carry forward the max LCS length
                }

                prev = temp; // Update prev for the next iteration
            }
        }
        
        return dp[m]; // The final LCS length for str1[0..n-1] and str2[0..m-1]
    }
}

