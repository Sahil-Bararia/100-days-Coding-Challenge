import java.util.*;

// Pair class to handle row and column indices
class Pair {
    int first;
    int second;
    public Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

class Solution {
    
    // Function to perform BFS to mark connected components of 1's
    public void isIsland(int matrix[][], boolean vis[][], int n, int m) {
        Queue<Pair> q = new LinkedList<>();
        int row = matrix.length;
        int col = matrix[0].length;
        q.add(new Pair(n, m));
        vis[n][m] = true;

        // Possible directions (down, right, left, up)
        int delrow[] = {1, 0, 0, -1};
        int delcol[] = {0, 1, -1, 0};

        while (!q.isEmpty()) {
            Pair temp = q.poll();
            int r = temp.first;
            int c = temp.second;

            for (int i = 0; i < 4; i++) {
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];

                // Check if the next cell is valid, not visited, and is land ('1')
                if (nrow >= 0 && nrow < row && ncol >= 0 && ncol < col && matrix[nrow][ncol] == 1 && !vis[nrow][ncol]) {
                    q.add(new Pair(nrow, ncol));
                    vis[nrow][ncol] = true;
                }
            }
        }
    }

    // Main function to count the number of closed islands
    public int closedIslands(int[][] matrix, int N, int M) {
        boolean vis[][] = new boolean[N][M];

        // Mark all lands connected to the boundary as visited
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if ((i == 0 || j == 0 || i == N - 1 || j == M - 1) && matrix[i][j] == 1) {
                    isIsland(matrix, vis, i, j);
                }
            }
        }

        // Count closed islands
        int c = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (!vis[i][j] && matrix[i][j] == 1) {
                    // Found a closed island
                    c++;
                    isIsland(matrix, vis, i, j);
                }
            }
        }
        return c;
    }
}
