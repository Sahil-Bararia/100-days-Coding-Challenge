//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}

class GfG {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        //testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");
            
            //size of array
            int n = Integer.parseInt(inputLine[0]);
            Job[] arr = new Job[n];
            inputLine = br.readLine().trim().split(" ");
            
            //adding id, deadline, profit
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }
            
            Solution ob = new Solution();
            
            //function call
            int[] res = ob.JobScheduling(arr, n);
            System.out.println (res[0] + " " + res[1]);
        }
    }
}
// } Driver Code Ends


class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Sort jobs in descending order of profit
        Arrays.sort(arr, (a, b) -> Integer.compare(b.profit, a.profit));
        
        // Find the maximum deadline to determine the size of the sequence array
        int maxDeadline = 0;
        for(int i = 0; i < n; i++) {
            maxDeadline = Math.max(maxDeadline, arr[i].deadline);
        }
        
        // Create a sequence array to keep track of free time slots, initialized to -1
        int[] seq = new int[maxDeadline + 1];
        Arrays.fill(seq, -1);
        
        int countJobs = 0;
        int totalProfit = 0;
        
        // Iterate over all the jobs
        for(int i = 0; i < n; i++) {
            // Find a free slot for this job, starting from its deadline
            for(int j = arr[i].deadline; j > 0; j--) {
                if(seq[j] == -1) { // If the slot is free
                    seq[j] = arr[i].id; // Assign this job to the slot
                    countJobs++; // Increase the count of jobs done
                    totalProfit += arr[i].profit; // Add the profit
                    break; // No need to check earlier slots
                }
            }
        }
        
        // The result is the number of jobs done and the total profit
        return new int[] { countJobs, totalProfit };
    }
}


/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
*/
